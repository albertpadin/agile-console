#!/usr/bin/python

import os
import sys
import subprocess
import urllib2
import json
from slugify import slugify

cwd = (os.getcwd() + "/agile")
home = os.path.expanduser("~")

options = []
command = ""
parameters = []


def extract_options(s):
	for i in s:
		if i in 'abcdefghijklmnopqrstuvwxyz':
			options.append(i)


def colorize(text, color=None):
	if color == 'red':
		return '\033[1;31m' + text + '\033[0m'
	elif color == 'blue':
		return '\033[1;34m' + text + '\033[0m'
	elif color == 'green':
		return '\033[1;32m' + text + '\033[0m'
	elif color == 'yellow':
		return '\033[1;33m' + text + '\033[0m'
	elif color == 'magenta' or color == 'pink':
		return '\033[1;35m' + text + '\033[0m'
	elif color == 'cyan':
		return '\033[1;36m' + text + '\033[0m'
	else:
		return text


def read_config():
	f = open(home + "/.agileconfig","r+")
	if not f:
		return {}
	contents = f.read()
	if contents:
		contents = json.loads(contents)
	else:
		contents = {}
	f.close()
	return contents


def add_to_config(key, value):
	f = open(home + "/.agileconfig","w+")
	if not f:
		return {}
	contents = f.read()
	if contents:
		contents = json.loads(contents)
	else:
		contents = {}
	contents[key] = value
	f.write(json.dumps(contents))
	f.close()
	return contents


CONFIG = read_config()

if not 'user' in CONFIG:
	email = raw_input("Enter your email address: ")
	add_to_config('user', email.lower().strip())


def get_current_project_id():
	project_url = subprocess.check_output(["git", "config", "--get", "remote.origin.url"])
	try:
		return CONFIG[project_url]
	except KeyError:
		return None


def link_project():
	project_url = subprocess.check_output(["git", "config", "--get", "remote.origin.url"])

	print "Fetching Projects..."

	response = urllib2.urlopen('http://applify.sym.ph/api/v1/projects')
	api_response = json.loads(response.read())
	projects = api_response['data']['projects']

	if projects:
		count = 1
		for project in projects:
			print ''
			print colorize(str(count) + " " + str(project['name']), 'green')
			print project['description']
			count += 1

	b = raw_input("Enter # of Project to Link to this repo: ")
	try:
		index = int(b) - 1
	except:
		print "Error."

	if index < 0 or index >= count:
		print "Error."
		sys.exit(0)

	project_id = projects[index]["id"]
	add_to_config(project_url, project_id)


def fetch_tasks(filter_status=None):
	print "Fetching Tasks..."

	if filter_status:
		response = urllib2.urlopen('http://applify.sym.ph/api/v1/items?filter_status=' + filter_status)
	else:
		response = urllib2.urlopen('http://applify.sym.ph/api/v1/items')
	api_response = json.loads(response.read())
	items = api_response['data']['items']

	if items:
		count = 1
		for item in items:
			if item['status'] == 'DONE':
				print colorize(str(count) + '\t' + item['content'], 'green')
			elif item['status'] == 'UNDONE':
				print colorize(str(count) + '\t' + item['content'], 'red')
			elif item['status'] == 'PAUSED':
				print colorize(str(count) + '\t' + item['content'], 'yellow')
			elif item['status'] == 'STARTED':
				print colorize(str(count) + '\t' + item['content'], 'cyan')
			count += 1
		print '\nFetched ' + str(count) + ' tasks.'
	else:
		print "No Tasks"

	return items


def start_task(task_id):
	try:
		print "Starting Task with id " + str(task_id) + "..."
		url = 'http://applify.sym.ph/api/v1/items/' + str(task_id)
		task_data = {
			"status": "STARTED"
		}
		data = json.dumps(task_data)
		req = urllib2.Request(url, data, {'Content-Type': 'application/json'})
		response = urllib2.urlopen(req)
		api_response = json.loads(response.read())
		response.close()
		print "Started Task."
		return True

	except IndexError:
		print "What task do you want me to create? Please surround it with quotes."

	return False


# Parse args into command, options, and parameters
args = sys.argv
for arg in args[1:]:
	if arg.startswith("-"):
		extract_options(arg)

	elif arg == cwd:
		continue

	elif not command:
		command = arg

	else:
		parameters.append(arg)


# List Projects
if command == "projects":
	if not parameters:
		print "Fetching Projects..."

		response = urllib2.urlopen('http://applify.sym.ph/api/v1/projects')
		api_response = json.loads(response.read())
		projects = api_response['data']['projects']

		if projects:
			count = 1
			for project in projects:
				print ''
				print colorize(str(project['name']), 'green')
				print project['description']
				count += 1
			print '\nFetched ' + str(count) + ' projects.'
		else:
			print "No Projects"

	elif parameters[0] == 'link':
		link_project()


elif command == "link":
	if parameters:
		if parameters[0] == 'project':
			link_project()


# List Tasks
elif command == "tasks":
	if not parameters:
		fetch_tasks()


elif command == 'start':
	items = fetch_tasks()
	b = raw_input("Enter # of Task to Start: ")
	try:
		index = int(b) - 1
	except:
		print "Error."
		sys.exit(0)

	item_id = items[index]["id"]

	# Start Task
	if not start_task(item_id):
		sys.exit(0)

	# Create branch. If it exists, switch to it.
	git_response = subprocess.check_output(["git", "checkout", "-b", "'" + slugify(items[index]["content"]) + "_" + str(item_id) + "'"])
	if "already exists" in git_response:
		# Branch exists.
		git_response = subprocess.check_output(["git", "checkout", "'" + slugify(items[index]["content"]) + "_" + str(item_id) + "'"])

	print "Switched to branch. Go! Go! Go!"


elif command == 'create':
	if not parameters:
		print "What do you want me to create? Missing parameter error."

	elif parameters[0] == 'task':
		try:
			task = parameters[1]
			print "Creating Task for " + CONFIG['user'] + "..."
			url = 'http://applify.sym.ph/api/v1/items'
			task_data = {
				"kind": "task",
				"content": parameters[1],
				"owner": CONFIG['user'],
				"project": get_current_project_id(),
				"tags": ["SAMPLE_TAG"]
			}
			data = json.dumps(task_data)
			req = urllib2.Request(url, data, {'Content-Type': 'application/json'})
			response = urllib2.urlopen(req)
			api_response = json.loads(response.read())
			response.close()
			print "Created Task: " + task_data["content"]

		except IndexError:
			print "What task do you want me to create? Please surround it with quotes."

	elif parameters[0] == 'project':
		try:
			project_name = parameters[1]
			project_description = parameters[2]
			print "Creating Project for " + CONFIG['user'] + "..."
			url = 'http://applify.sym.ph/api/v1/projects'
			project_data = {
				"name": project_name,
				"description": project_description
			}
			data = json.dumps(project_data)
			req = urllib2.Request(url, data, {'Content-Type': 'application/json'})
			response = urllib2.urlopen(req)
			api_response = json.loads(response.read())
			response.close()
			print "Created Project: " + project_data["name"]

		except IndexError:
			print "Name AND Description required. Please surround it with quotes."


# git config --get remote.origin.url

# a = subprocess.check_output(["git", "branch"])
# b = a.splitlines()
# print a
# print b